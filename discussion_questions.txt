Part 1: Discussion Questions

Recursion
1. Q: In your own words, what is recursion?
   A: When function calls itself. 
2. Q: Why is it necessary to have a base case?
   A: This is the only way to stop recursion before stack will be overflowed.
   
Graphs
1. Q: What is a graph?
   A: When we deal with data which has some kind of relations between data points (distance, relations, order) - that kind of data might be represented using graph-structures. 
2. Q: How is a graph different from a tree?
   A: Graph is a more general term. When the graph has an initial node (usually called - root), then we have a tree.  
3. Q: Give an example of something that would be good to model with a graph.
   A: Transportation routes, mazes, social networks. 
   
Performance of Different Data Structures
Q: Fill in the runtimes for the following actions for the table below:
A:  ---------------------------------------------------------------------------
    Data Structure	        | Index	 Search	Add-R	Add-L	Pop-L	Pop-R
    ---------------------------------------------------------------------------
    Python List (Array)	        | O(1)	 O(n)	O(1)	O(n)	O(n)	 O(1)
    ---------------------------------------------------------------------------
    Linked List	 	        | O(n)   O(n)   O(1)    O(1)    O(1)     O(n)
    ---------------------------------------------------------------------------
    Doubly-Linked List	        | O(n)   O(n)   O(1)    O(1)    O(1)     O(1) 
    ---------------------------------------------------------------------------
    Queue (as Array)	        | X	 X	O(1)	X	O(n)	  X    
    ---------------------------------------------------------------------------
    Queue (as LL or DLL)        | X	X	O(1)	X	O(1)	  X
    ---------------------------------------------------------------------------
    Stack (as Array, LL, or DLL)| X	X	O(1)	X	X	 O(1)
    ---------------------------------------------------------------------------
    Deque (as DLL)	        | X	X	O(1)	O(1)    O(1)     O(1) 	 
    ---------------------------------------------------------------------------
    Index: Find an item in the structure when you know its position
    Search: Find an item in the structure when you know its data
    Add(R/L): Set a key in set/dictionary or add node to tree
    Pop(R/L): Remove a key or node

Q: Fill in Runtime and Memory:
A: ------------------------------------------------------------------------------------
   Data Structure	      | Get	    Add	        Delete	    Iterate	Memory
   ------------------------------------------------------------------------------------
   Dictionary (Hash Map)      | O(1)	    O(1)        O(1)	    O(n)	medium
   ------------------------------------------------------------------------------------
   Set (Hash Map)             | O(1)        O(1)        O(1)        O(n)        medium      
   ------------------------------------------------------------------------------------
   Binary Search Tree         | O(log n)    O(log n)    O(log n)    O(n)        little
   ------------------------------------------------------------------------------------
   Tree                       | O(n)        O(n)        O(n)        O(n)        little
   ------------------------------------------------------------------------------------
   Get: Find an item in the structure
   Add: Set a key in set/dictionary or add node to tree
   Delete: Remove a key or node
   Iterate: Find next item in data structure
   Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)
   
Sorting
1. Q: Describe in words how the Bubble Sort algorithm works.
   A: A classic comparative algorithm which has n*n complexity. Each step bubble-sorted goes through the array and successively compares adjacent pairs of elements, swapping them in case they are not in order. It guarantees each step the biggest element to be moved to the end of the array. Requires n iterations (n - a number of elements in an initial array) for the array to be sorted.
2. Q: Describe in words how the Merge Sort algorithm works.
   A:  The idea of Merge Sort implies using of a merge function.
   The merge function takes as an input two sorted sequences and merge them into one sorted sequence by comparing at each step the first elements of initial sequences and popping the smallest(or biggest) one to be added to the resulting sequence.
   To make use of merge function for an unordered sequence it is one more implication required - the sequence of a length one is always ordered. 
   Here comes her majesty recursion which takes care of splitting an initial unordered sequence into two parts and applying merge function over them until on the very bottom of recursion calls the initial sequence will be split into base cases and step by step merged into the new sequence with a size and elements from the initial one but ordered.
   
3. Q: Describe in words how the Quick Sort algorithm works.
   A: The idea of Quick Sort is to sort the array over the pivot element (which makes this "pivot" element to be at his place after each iteration) and then apply Quick sort to the elements lies to the left and to the right from the pivot. Doesn't require a new array and might be done in-place. 
